// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  uuid      String   @unique @default(uuid())
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(200)
  status    Int      @default(1) @db.TinyInt() //1-active 2- not active
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]

  @@index([id])
}

model End_User_Types {
  uuid      String   @unique @default(uuid())
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(200)
  status    Int      @default(1) @db.TinyInt() //1-active 2- not active
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]

  @@index([id])
}

model User {
  id                      Int            @id @default(autoincrement())
  uuid                    String         @unique @default(uuid())
  endUserType             Int            @default(1) @db.Int() //1-athele 2- Parents
  notificationId          Int?           @db.Int
  userDetailsId           Int?           @unique @db.Int()
  userAdditionalDetailsId Int?           @unique @db.Int()
  email                   String?        @unique @db.VarChar(200)
  firstName               String?        @db.VarChar(200)
  lastName                String?        @db.VarChar(200)
  countryCode             String?        @db.VarChar(11)
  phoneNumber             String?        @unique @db.VarChar(50)
  password                String         @db.VarChar(500)
  dob                     String?        @db.VarChar(200)
  verified                Boolean        @default(false)
  status                  Int            @default(1) @db.TinyInt() //1-active 2- not active
  isDeleted               Int            @default(1) @db.TinyInt() //1-not deleted 2- deleted
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  endUser                 End_User_Types @relation(fields: [endUserType], references: [id])
  role                    Role[]
  Notification            Notification?  @relation(fields: [notificationId], references: [id])

  @@index([id, email, phoneNumber, userDetailsId, userAdditionalDetailsId])
}

model Events {
  id                     Int      @id @default(autoincrement())
  uuid                   String   @unique @default(uuid())
  name                   String   @db.VarChar(200)
  eventLocation          String   @db.Text()
  eventLocationLatitude  String?  @db.VarChar(500)
  eventLocationLongitude String?  @db.VarChar(500)
  eventDateTime          DateTime @db.DateTime(0)
  eventImageUrl          String?  @db.VarChar(200)
  eventImageDisplayName  String?  @db.VarChar(200)
  membersCount           Int      @default(0) @db.Int()
  status                 Int      @default(1) @db.TinyInt() //1-active 2- expired
  isDeleted              Int      @default(1) @db.TinyInt() //1-not deleted 2- deleted
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([id])
}

model Event_Packages {
  id               Int      @id @default(autoincrement())
  uuid             String   @unique @default(uuid())
  name             String   @db.VarChar(200)
  eventPrice       Int      @db.Int()
  eventDescription String?  @db.Text
  packageType      Int      @db.Int
  status           Int      @default(1) @db.TinyInt() //1-active 2- expired
  isDeleted        Int      @default(1) @db.TinyInt() //1-not deleted 2- deleted
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  userId      Int      @db.Int()
  description String   @db.Text
  isRead      Int      @default(2) @db.TinyInt()
  type        Int      @default(1) @db.Int()
  isDeleted   Int      @default(1) @db.TinyInt() //1-not deleted 2- deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@index([userId, uuid])
}
